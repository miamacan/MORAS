class Vector {
	field Array arr;
	field int size, capacity;

	// stvara novi prazan vektor
	constructor Vector new() {
		let arr = Array.new(1);
		let size = 0;
		let capacity = 1;
		return this;
	}
	
	// vraca br el. u vektoru
	method int size() {
		return size;
	}
	
	method void size_minus_1() {
		let size = size - 1;
		return;
	}
	
	// vraca vrijednost vektora na indeksu k
	method int get(int k) {
		var int val;
		let val = 0;
		if(k < size) {
			let val = arr[k]; 
		}else {
			do Output.printString("Indeks nije valjan.");
		}
		return val;
	}

	// postavlja vrijednost vektora na indeksu k na vrijednost v
	method void set1(int k, int v) {
		if(k < size) {
			let arr[k] = v;
		}else {
			do Output.printString("Indeks nije valjan.");
		}
		return;
	}
	
	// kapacitet se udvostrucava ukoliko nema dovoljno mjesta za pohranu
	method void resize() {
		var int double_cap, i;
		var Array newArr;
		let i = 0;

		let double_cap = Math.multiply(2, capacity);
		let newArr = Array.new(double_cap);
		while(i < size) {
			let newArr[i] = arr[i];
			let i = i + 1;
		}
		let capacity = double_cap;
		do arr.dispose();
		let arr = newArr;
		return;
	}

	// postavlja element na kraj vektora
	method void pushBack(int val) {
		var int pos;
		if (size = capacity) {
			do resize();
		}
		let pos = size;
		let arr[pos] = val;
		let size = size + 1;
		return;
	}

	// brise sve elmente iz vektora
	method void clear() {
		var Array newArr;
		do arr.dispose();
		let newArr = Array.new(1);
		let size = 0;
		let capacity = 1;
		let arr = newArr;
		return;
	}
	
	method void print() {
		var int i;
		let i = 0;
		
		do Output.printString("Skup: ");
		while(i < size) {
			do Output.printInt(arr[i]);
			do Output.printString(" ");
			let i = i + 1;
		}
		do Output.println();
		do Output.printString("Size: ");
		do Output.printInt(size);
		do Output.println();
		return;
	}  

	// brisanje iz memorije
	method void dispose() {
		do arr.dispose();
		do Memory.deAlloc(this);
		return;
	}
}